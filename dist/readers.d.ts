import { Context, Endian } from './common';
export declare type ReadFunction<V = Value> = (context: Context) => ValueLengthTuple<V>;
export declare type Value = number | string | BigInt | Value[] | ArrayBuffer;
export declare type ValueLengthTuple<V = Value> = readonly [V, number];
export declare const readBytes: (length: number) => ({ buffer, offset }: Context) => ValueLengthTuple<ArrayBuffer>;
export declare const readInt8: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readUint8: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readInt16: (endian: Endian) => ({ buffer, offset }: Context) => readonly [number, number];
export declare const readInt16Le: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readInt16Be: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readUint16: (endian: Endian) => ({ buffer, offset }: Context) => readonly [number, number];
export declare const readUint16Le: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readUint16Be: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readInt32: (endian: Endian) => ({ buffer, offset }: Context) => readonly [number, number];
export declare const readInt32Le: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readInt32Be: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readUint32: (endian: Endian) => ({ buffer, offset }: Context) => readonly [number, number];
export declare const readUint32Le: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readUint32Be: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readBigInt64: (endian: Endian) => ({ buffer, offset }: Context) => readonly [bigint, number];
export declare const readBigInt64Le: ({ buffer, offset }: Context) => readonly [bigint, number];
export declare const readBigInt64Be: ({ buffer, offset }: Context) => readonly [bigint, number];
export declare const readBigUint64: (endian: Endian) => ({ buffer, offset }: Context) => readonly [bigint, number];
export declare const readBigUint64Le: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readBigUint64Be: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readFloat32: (endian: Endian) => ({ buffer, offset }: Context) => readonly [number, number];
export declare const readFloat32Le: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readFloat32Be: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readFloat64: (endian: Endian) => ({ buffer, offset }: Context) => readonly [number, number];
export declare const readFloat64Le: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readFloat64Be: ({ buffer, offset }: Context) => readonly [number, number];
export declare const readFixedString: (encoding: string) => (length: number) => ({ buffer, offset }: Context) => readonly [string, number];
